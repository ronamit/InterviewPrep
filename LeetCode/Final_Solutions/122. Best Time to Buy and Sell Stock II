class Solution:
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        max_prof = 0
        n = len(prices)
        if n==0: return 0

        for i in range(1,n):
            if prices[i] > prices[i-1]:
                max_prof += prices[i] - prices[i-1]
        return max_prof


#         #################################################################
#         # Table solution (efficent)
#         #############################################################
#         n = len(prices)
#         if n==0: return 0

#         V = [[0 for ii in range(n+1)] for jj in range(n+1)]

#         # V[,n] = is value of day without a held stock

#         for i in range(n-1,-1,-1):
#              # in case we don't have a held stock
#              # either we don't buy or buy today
#             V[i][n] = max(V[i+1][n], V[i+1][i])

#              # in case we have a held stock (we can have a stock from 0 to i-1):
#             for h in range(i):
#                 max_prof = 0
#                 # we check what is the value of holding the stock
#                 # by taking a maximum on the selling time (from i to n-1)
#                 for j in range(i,n):
#                     # j = selling time
#                     profit = prices[j] - prices[h]
#                     if j < n-1:
#                         # add the best profit starting the day after with no stock:
#                         profit += V[j+1][n]
#                     max_prof = max(max_prof, profit)
#                 V[i][h] = max_prof

#         # print(V)
#         return V[0][n]




        #################################################################
#         # Recoursive solution (inefficent)
#         #############################################################
#         if not prices:
#             return 0
#         n = len(prices)

#         def value(i, h):
#             # i = index of current day
#             # h = index of currently held stock, None if there is none

#             if i >= n:
#                 return 0

#             if h is None:
#                 # we don't have a held stock
#                 # either we don't buy or buy today
#                 return max(value(i+1, None), value(i+1, i))

#             # we  have a held stock
#             # we take the max on the time we sell it (today to end)
#             # we the the max on the total gain we would get
#             max_prof = 0
#             for j in range(i,n):
#                 max_prof = max(max_prof, prices[j] - prices[h]  + value(j+1, None))

#             return max_prof


#         return value(0, None)


